// Code generated by mockery v2.44.1. DO NOT EDIT.

package users

import mock "github.com/stretchr/testify/mock"

// Mock_UsersRepository is an autogenerated mock type for the UsersRepository type
type Mock_UsersRepository struct {
	mock.Mock
}

type Mock_UsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *Mock_UsersRepository) EXPECT() *Mock_UsersRepository_Expecter {
	return &Mock_UsersRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *Mock_UsersRepository) CreateUser(user *UserData) (int, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*UserData) (int, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*UserData) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*UserData) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mock_UsersRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Mock_UsersRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *UserData
func (_e *Mock_UsersRepository_Expecter) CreateUser(user interface{}) *Mock_UsersRepository_CreateUser_Call {
	return &Mock_UsersRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *Mock_UsersRepository_CreateUser_Call) Run(run func(user *UserData)) *Mock_UsersRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*UserData))
	})
	return _c
}

func (_c *Mock_UsersRepository_CreateUser_Call) Return(_a0 int, _a1 error) *Mock_UsersRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mock_UsersRepository_CreateUser_Call) RunAndReturn(run func(*UserData) (int, error)) *Mock_UsersRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveUser provides a mock function with given fields: userID
func (_m *Mock_UsersRepository) RetrieveUser(userID string) (UserData, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveUser")
	}

	var r0 UserData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (UserData, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) UserData); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(UserData)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mock_UsersRepository_RetrieveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveUser'
type Mock_UsersRepository_RetrieveUser_Call struct {
	*mock.Call
}

// RetrieveUser is a helper method to define mock.On call
//   - userID string
func (_e *Mock_UsersRepository_Expecter) RetrieveUser(userID interface{}) *Mock_UsersRepository_RetrieveUser_Call {
	return &Mock_UsersRepository_RetrieveUser_Call{Call: _e.mock.On("RetrieveUser", userID)}
}

func (_c *Mock_UsersRepository_RetrieveUser_Call) Run(run func(userID string)) *Mock_UsersRepository_RetrieveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mock_UsersRepository_RetrieveUser_Call) Return(_a0 UserData, _a1 error) *Mock_UsersRepository_RetrieveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mock_UsersRepository_RetrieveUser_Call) RunAndReturn(run func(string) (UserData, error)) *Mock_UsersRepository_RetrieveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *Mock_UsersRepository) UpdateUser(user *UserData) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*UserData) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mock_UsersRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Mock_UsersRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *UserData
func (_e *Mock_UsersRepository_Expecter) UpdateUser(user interface{}) *Mock_UsersRepository_UpdateUser_Call {
	return &Mock_UsersRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *Mock_UsersRepository_UpdateUser_Call) Run(run func(user *UserData)) *Mock_UsersRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*UserData))
	})
	return _c
}

func (_c *Mock_UsersRepository_UpdateUser_Call) Return(_a0 error) *Mock_UsersRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mock_UsersRepository_UpdateUser_Call) RunAndReturn(run func(*UserData) error) *Mock_UsersRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMock_UsersRepository creates a new instance of Mock_UsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock_UsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mock_UsersRepository {
	mock := &Mock_UsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
