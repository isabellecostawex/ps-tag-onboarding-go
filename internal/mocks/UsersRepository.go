// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	users "github.com/isabellecostawex/ps-tag-onboarding-go/internal/domain/users"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepository is an autogenerated mock type for the UsersRepository type
type UsersRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UsersRepository) CreateUser(user *users.UserData) (int, error) {
	ret := _m.Called(user)

	var r0 int
	if rf, ok := ret.Get(0).(func(*users.UserData) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.UserData) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveUser provides a mock function with given fields: userID
func (_m *UsersRepository) RetrieveUser(userID string) (users.UserData, error) {
	ret := _m.Called(userID)

	var r0 users.UserData
	if rf, ok := ret.Get(0).(func(string) users.UserData); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.UserData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *UsersRepository) UpdateUser(user *users.UserData) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.UserData) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
